# Name for your GitHub Actions workflow
name: Run Python Script on Salesforce Org

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab on GitHub
  workflow_dispatch:

# A workflow is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "run-python-script"
  run-python-script:
    # The type of runner that the job will run on. 'ubuntu-latest' is a standard choice.
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checks-out your repository's code into the runner under $GITHUB_WORKSPACE
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Install Node.js (a prerequisite for installing Salesforce CLI via npm)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 3: Install the Salesforce CLI (sf)
      - name: Install Salesforce CLI
        run: |
          npm install @salesforce/cli --global
          sf --version

      # Step 4: Authenticate to your Salesforce Org using an SFDX Auth URL
      # This step securely uses a GitHub Secret to hold the sensitive auth URL.
      - name: Authenticate to Salesforce Org
        run: |
          echo ${{ secrets.SFDX_AUTH_URL }} > ./SFDX_AUTH_URL.txt
          sf org login sfdx-url --sfdx-url-file ./SFDX_AUTH_URL.txt --set-default
          rm ./SFDX_AUTH_URL.txt # Clean up the temporary file immediately after use

      # Step 5: Set up the Python environment on the runner
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Specify the Python version your script needs

      # Step 6: Install Python dependencies from your requirements.txt file
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          # This command checks if requirements.txt exists before trying to install from it
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # Step 7: Run your Python script
      - name: Run Python Script
        run: |
          # ------------------------------------------------------------------
          # IMPORTANT: Replace 'your_script.py' with the actual name of your Python script.
          # Add any command-line arguments your script requires.
          # ------------------------------------------------------------------
          # Example for running the export_cml.py script:
          # python export_cml.py --developerName YourExpressionSet --version 1

          # Example for running the import_cml.py script (it uses an alias defined in the script):
          # python import_cml.py

          echo "Running the main Python script..."
          python your_script.py